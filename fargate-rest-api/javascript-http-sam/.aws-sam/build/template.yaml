AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
Description: 'Backend API with Lambda and DynamoDB, Lambda Authorizer

  '
Globals:
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 100
    Tracing: Active
Parameters:
  CognitoStackName:
    Description: An environment name for Cognito stack
    Type: String
    Default: serverless-api-cognito
  VPCStackName:
    Description: An environment name for VPC stack
    Type: String
    Default: fargate-rest-api-vpc
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}-ecs-cluster
  LocationsServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Memory: '0.5GB'
      Cpu: 256
      ExecutionRoleArn:
        Ref: LocationsServiceExecutionRole
      TaskRoleArn:
        Ref: LocationsServiceTaskRole
      ContainerDefinitions:
      - Name: locations-service
        Environment:
        - Name: LOCATIONS_TABLE
          Value:
            Ref: LocationsTable
        Image: 662754177324.dkr.ecr.us-east-1.amazonaws.com/locations-service-repository:1.0.0
        PortMappings:
        - ContainerPort: 8080
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region:
              Ref: AWS::Region
            awslogs-group:
              Ref: LocationsServiceLogGroup
            awslogs-stream-prefix: ecs
      - Name: xray-daemon
        Essential: true
        Image: amazon/aws-xray-daemon
        PortMappings:
        - HostPort: 2000
          ContainerPort: 2000
          Protocol: UDP
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region:
              Ref: AWS::Region
            awslogs-group:
              Ref: LocationsServiceLogGroup
            awslogs-stream-prefix: ecs
  LocationsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 5
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: locations-service
        ContainerPort: 8080
        TargetGroupArn:
          Ref: LocationsServiceLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::GetAtt:
            - LocationsServiceSecurityGroup
            - GroupId
          Subnets:
          - Fn::ImportValue:
              Fn::Sub: ${VPCStackName}-PrivateSubnet1
          - Fn::ImportValue:
              Fn::Sub: ${VPCStackName}-PrivateSubnet2
      TaskDefinition:
        Ref: LocationsServiceTaskDefinition
    DependsOn:
    - LocationsServiceLoadBalancerTargetGroup
    - LocationsServiceLoadBalancerPublicHTTPListener
  LocationsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}/ECS/LocationsService/SecurityGroup
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      SecurityGroupIngress:
      - CidrIp:
          Fn::ImportValue:
            Fn::Sub: ${VPCStackName}-VPCCIDR
        Description: Allow from within the VPC for port 8080
        FromPort: 8080
        IpProtocol: tcp
        ToPort: 8080
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VPCStackName}-VPC
  LocationsServiceLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: TCP
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckPort: 8080
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VPCStackName}-VPC
  LocationsServiceLoadBalancerPublicHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: LocationsServiceLoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LocationsServiceLoadBalancer
      Port: 80
      Protocol: TCP
  LocationsServiceLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: 'false'
      Scheme: internal
      Subnets:
      - Fn::ImportValue:
          Fn::Sub: ${VPCStackName}-PrivateSubnet1
      - Fn::ImportValue:
          Fn::Sub: ${VPCStackName}-PrivateSubnet2
      Type: network
  LocationsServiceVPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name:
        Fn::Sub: ${VPCStackName}LocationsServiceVPCLink
      TargetArns:
      - Ref: LocationsServiceLoadBalancer
  LocationsServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  LocationsServiceTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
      - PolicyName: DynamoDBCrudAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
            - dynamodb:DescribeTable
            - dynamodb:ConditionCheckItem
            Resource:
              Fn::Sub:
              - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
              - tableName:
                  Ref: LocationsTable
  LocationsServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/ecs/locations-service
      RetentionInDays: 7
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/authorizer.handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID:
            Fn::ImportValue:
              Fn::Sub: ${CognitoStackName}-UserPool
          ADMIN_GROUP_NAME:
            Fn::ImportValue:
              Fn::Sub: ${CognitoStackName}-UserPoolAdminGroupName
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}
      CodeUri: AuthorizerFunction
  AuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AuthorizerFunction}
      RetentionInDays: 7
  AuthorizerFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Tags:
      - Key: Stack
        Value:
          Fn::Sub: ${AWS::StackName}
  AuthorizerFunctionExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-Authorizer-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: lambda:InvokeFunction
          Resource:
            Fn::GetAtt:
            - AuthorizerFunction
            - Arn
      Roles:
      - Ref: AuthorizerFunctionExecutionRole
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../../src/api/swagger.yaml
      Cors:
        AllowMethods: '''PUT, GET, DELETE, OPTIONS'''
        AllowHeaders: '''Content-Type'', ''Authorization'', ''X-Forwarded-For'', ''X-Api-Key'',
          ''X-Amz-Date'', ''X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      Auth:
        ApiKeyRequired: false
        AddDefaultAuthorizerToCorsPreflight: false
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - AccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol", "integrationStatus":
          $context.integrationStatus, "integrationLatency": $context.integrationLatency,
          "responseLength":"$context.responseLength" }'
      Tags:
        Name:
          Fn::Sub: ${AWS::StackName}-API
        Stack:
          Fn::Sub: ${AWS::StackName}
  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/APIAccessLogs
  LocationsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: locationid
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}
