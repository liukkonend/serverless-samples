# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Description: >
  Backend API with Lambda and DynamoDB, Lambda Authorizer

Globals:
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 100
    Tracing: Active

Parameters:
  CognitoStackName:
    Description: An environment name for Cognito stack
    Type: String
    Default: serverless-api-cognito
  VPCStackName:
    Description: An environment name for VPC stack
    Type: String
    Default: fargate-rest-api-vpc

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-ecs-cluster"

  LocationsServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Memory: 0.5GB
      Cpu: 256
      ExecutionRoleArn: !Ref LocationsServiceExecutionRole
      TaskRoleArn: !Ref LocationsServiceTaskRole
      ContainerDefinitions:
        - Name: locations-service
          Environment:
            - Name: LOCATIONS_TABLE
              Value: !Ref LocationsTable
          Image: 662754177324.dkr.ecr.us-east-1.amazonaws.com/locations-service-repository:1.0.0
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LocationsServiceLogGroup
              awslogs-stream-prefix: ecs
        - Name: xray-daemon
          Essential: true
          Image: amazon/aws-xray-daemon
          PortMappings:
            - HostPort: 2000
              ContainerPort: 2000
              Protocol: UDP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LocationsServiceLogGroup
              awslogs-stream-prefix: ecs

  LocationsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 5
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: locations-service
          ContainerPort: 8080
          TargetGroupArn: !Ref LocationsServiceLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt LocationsServiceSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1"
            - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet2"
      TaskDefinition: !Ref LocationsServiceTaskDefinition
    DependsOn:
      - LocationsServiceLoadBalancerTargetGroup
      - LocationsServiceLoadBalancerPublicHTTPListener

  LocationsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName}/ECS/LocationsService/SecurityGroup"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 
            Fn::ImportValue: !Sub "${VPCStackName}-VPCCIDR"
          Description: Allow from within the VPC for port 8080
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId: 
        Fn::ImportValue: !Sub "${VPCStackName}-VPC"

  LocationsServiceLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: TCP
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckPort: 8080
      VpcId: 
        Fn::ImportValue: !Sub "${VPCStackName}-VPC"

  LocationsServiceLoadBalancerPublicHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LocationsServiceLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref LocationsServiceLoadBalancer
      Port: 80
      Protocol: TCP

  LocationsServiceLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internal
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1"
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet2"
      Type: network

  LocationsServiceVPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: !Sub "${VPCStackName}LocationsServiceVPCLink"
      TargetArns:
        - !Ref LocationsServiceLoadBalancer

  LocationsServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  LocationsServiceTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: DynamoDBCrudAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:ConditionCheckItem
                Resource: 
                  Fn::Sub:
                    - "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}"
                    - tableName: !Ref LocationsTable

  LocationsServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/locations-service"
      RetentionInDays: 7

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/authorizer.handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID: 
            Fn::ImportValue: 
              !Sub "${CognitoStackName}-UserPool"
          ADMIN_GROUP_NAME: 
            Fn::ImportValue: 
              !Sub "${CognitoStackName}-UserPoolAdminGroupName"
      Tags:
        Stack: !Sub "${AWS::StackName}"

  AuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthorizerFunction}"
      RetentionInDays: 7

  AuthorizerFunctionExecutionRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - apigateway.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: "/"
      Tags:
        - Key: "Stack" 
          Value: !Sub "${AWS::StackName}"

  AuthorizerFunctionExecutionRolePolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-Authorizer-Policy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !GetAtt AuthorizerFunction.Arn
      Roles: 
        - Ref: AuthorizerFunctionExecutionRole

  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./src/api/swagger.yaml
      Cors:
        AllowMethods: "'PUT, GET, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type', 'Authorization', 'X-Forwarded-For', 'X-Api-Key', 'X-Amz-Date', 'X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: false
        AddDefaultAuthorizerToCorsPreflight: false
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"

  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/${AWS::StackName}/APIAccessLogs"

  LocationsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: locationid
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        Stack: !Sub "${AWS::StackName}"

  # ResourcesTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: resourceid
  #         AttributeType: S
  #       - AttributeName: locationid
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: resourceid
  #         KeyType: HASH
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2
  #     GlobalSecondaryIndexes:
  #     - IndexName: locationidGSI
  #       KeySchema:
  #       - AttributeName: locationid
  #         KeyType: HASH
  #       Projection:
  #         ProjectionType: ALL
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 2
  #         WriteCapacityUnits: 2
  #     Tags:
  #       - Key: "Stack" 
  #         Value: !Sub "${AWS::StackName}"

  # BookingsTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: bookingid
  #         AttributeType: S
  #       - AttributeName: userid
  #         AttributeType: S
  #       - AttributeName: resourceid
  #         AttributeType: S
  #       - AttributeName: starttimeepochtime
  #         AttributeType: N
  #     KeySchema:
  #       - AttributeName: bookingid
  #         KeyType: HASH
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2
  #     GlobalSecondaryIndexes:
  #     - IndexName: useridGSI
  #       KeySchema:
  #       - AttributeName: userid
  #         KeyType: HASH
  #       Projection:
  #         ProjectionType: ALL
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 2
  #         WriteCapacityUnits: 2
  #     - IndexName: bookingsByUserByTimeGSI
  #       KeySchema:
  #       - AttributeName: userid
  #         KeyType: HASH
  #       - AttributeName: starttimeepochtime
  #         KeyType: RANGE
  #       Projection:
  #         ProjectionType: ALL
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 2
  #         WriteCapacityUnits: 2
  #     - IndexName: bookingsByResourceByTimeGSI
  #       KeySchema:
  #       - AttributeName: resourceid
  #         KeyType: HASH
  #       - AttributeName: starttimeepochtime
  #         KeyType: RANGE
  #       Projection:
  #         ProjectionType: ALL
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 2
  #         WriteCapacityUnits: 2
  #     Tags:
  #       - Key: "Stack" 
  #         Value: !Sub "${AWS::StackName}"

  # AlarmsKMSKey:
  #   Type: AWS::KMS::Key
  #   Properties: 
  #     Description: CMK for SNS alarms topic
  #     Enabled: true
  #     EnableKeyRotation: True
  #     KeyPolicy: 
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal: 
  #             Service: 
  #               - "cloudwatch.amazonaws.com"
  #               - "sns.amazonaws.com"
  #           Action:
  #             - "kms:GenerateDataKey*"
  #             - "kms:Decrypt"
  #           Resource: "*"
  #         - Effect: Allow
  #           Principal: 
  #             AWS: 
  #               - !Sub "arn:aws:iam::${AWS::AccountId}:root"
  #           Action:
  #             - "kms:*"
  #           Resource: "*"
  #     KeySpec: SYMMETRIC_DEFAULT
  #     KeyUsage: ENCRYPT_DECRYPT
  #     PendingWindowInDays: 30
  #     Tags: 
  #       - Key: "Stack" 
  #         Value: !Sub "${AWS::StackName}"

  # AlarmsTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     KmsMasterKeyId: !Ref AlarmsKMSKey
  #     Tags:
  #       - Key: "Stack" 
  #         Value: !Sub "${AWS::StackName}"

  # RestApiErrorsAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: ApiName
  #         Value: !Ref RestApi
  #     EvaluationPeriods: 1
  #     MetricName: 5XXError
  #     Namespace: AWS/ApiGateway
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # AuthorizerFunctionErrorsAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref AuthorizerFunction
  #     EvaluationPeriods: 1
  #     MetricName: Errors
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # LocationsFunctionErrorsAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref LocationsFunction
  #     EvaluationPeriods: 1
  #     MetricName: Errors
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # ResourcesFunctionErrorsAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref ResourcesFunction
  #     EvaluationPeriods: 1
  #     MetricName: Errors
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # BookingsFunctionErrorsAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref BookingsFunction
  #     EvaluationPeriods: 1
  #     MetricName: Errors
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # LocationsFunctionThrottlingAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref LocationsFunction
  #     EvaluationPeriods: 1
  #     MetricName: Throttles
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # ResourcesFunctionThrottlingAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref ResourcesFunction
  #     EvaluationPeriods: 1
  #     MetricName: Throttles
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # BookingsFunctionThrottlingAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref BookingsFunction
  #     EvaluationPeriods: 1
  #     MetricName: Throttles
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # AuthorizerFunctionThrottlingAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref AuthorizerFunction
  #     EvaluationPeriods: 1
  #     MetricName: Throttles
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # LocationsDynamoDBThrottlingAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: TableName
  #         Value: !Ref LocationsTable
  #     EvaluationPeriods: 1
  #     MetricName: ThrottledRequests
  #     Namespace: AWS/DynamoDB
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # ResourcesDynamoDBThrottlingAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: TableName
  #         Value: !Ref ResourcesTable
  #     EvaluationPeriods: 1
  #     MetricName: ThrottledRequests
  #     Namespace: AWS/DynamoDB
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # BookingsDynamoDBThrottlingAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Ref AlarmsTopic
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: TableName
  #         Value: !Ref BookingsTable
  #     EvaluationPeriods: 1
  #     MetricName: ThrottledRequests
  #     Namespace: AWS/DynamoDB
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1.0

  # # ApplicationDashboard:
  #   Type: AWS::CloudWatch::Dashboard
  #   Properties:
  #     DashboardName: !Sub "${AWS::StackName}-dashboard"
  #     DashboardBody: 
  #       Fn::Sub: >
  #         {
  #           "widgets": [
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 12,
  #                   "x": 0,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/Lambda", "Invocations", "FunctionName", "${LocationsFunction}" ],
  #                           [ ".", "Errors", ".", "." ],
  #                           [ ".", "Throttles", ".", "." ],
  #                           [ ".", "Duration", ".", ".", { "stat": "Average" } ],
  #                           [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" } ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "region": "${AWS::Region}",
  #                       "stacked": false,
  #                       "title": "Locations Lambda",
  #                       "period": 60,
  #                       "stat": "Sum"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 18,
  #                   "x": 0,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/Lambda", "Invocations", "FunctionName", "${ResourcesFunction}" ],
  #                           [ ".", "Errors", ".", "." ],
  #                           [ ".", "Throttles", ".", "." ],
  #                           [ ".", "Duration", ".", ".", { "stat": "Average" } ],
  #                           [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" } ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "region": "${AWS::Region}",
  #                       "stacked": false,
  #                       "title": "Resources Lambda",
  #                       "period": 60,
  #                       "stat": "Sum"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 24,
  #                   "x": 0,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/Lambda", "Invocations", "FunctionName", "${BookingsFunction}" ],
  #                           [ ".", "Errors", ".", "." ],
  #                           [ ".", "Throttles", ".", "." ],
  #                           [ ".", "Duration", ".", ".", { "stat": "Average" } ],
  #                           [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" } ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "region": "${AWS::Region}",
  #                       "stacked": false,
  #                       "title": "Bookings Lambda",
  #                       "period": 60,
  #                       "stat": "Sum"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 6,
  #                   "x": 6,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/Lambda", "Invocations", "FunctionName", "${AuthorizerFunction}" ],
  #                           [ ".", "Errors", ".", "." ],
  #                           [ ".", "Throttles", ".", "." ],
  #                           [ ".", "Duration", ".", ".", { "stat": "Average" } ],
  #                           [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" } ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "region": "${AWS::Region}",
  #                       "stacked": false,
  #                       "title": "Authorizer Lambda",
  #                       "period": 60,
  #                       "stat": "Sum"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 12,
  #                   "x": 6,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${LocationsTable}", { "stat": "Maximum" } ],
  #                           [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "stat": "Maximum" } ],
  #                           [ ".", "ProvisionedReadCapacityUnits", ".", ".", { "period": 300 } ],
  #                           [ ".", "ProvisionedWriteCapacityUnits", ".", ".", { "period": 300 } ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "region": "${AWS::Region}",
  #                       "title": "DynamoDB - Locations",
  #                       "period": 60,
  #                       "stat": "Average"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 18,
  #                   "x": 6,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${ResourcesTable}", { "stat": "Maximum" } ],
  #                           [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "stat": "Maximum" } ],
  #                           [ ".", "ProvisionedReadCapacityUnits", ".", ".", { "period": 300 } ],
  #                           [ ".", "ProvisionedWriteCapacityUnits", ".", ".", { "period": 300 } ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "region": "${AWS::Region}",
  #                       "title": "DynamoDB - Resources",
  #                       "period": 60,
  #                       "stat": "Average"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 24,
  #                   "x": 6,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${BookingsTable}", { "period": 60, "stat": "Maximum" } ],
  #                           [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "period": 60, "stat": "Maximum" } ],
  #                           [ ".", "ProvisionedReadCapacityUnits", ".", "." ],
  #                           [ ".", "ProvisionedWriteCapacityUnits", ".", "." ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "region": "${AWS::Region}",
  #                       "title": "DynamoDB - Bookings",
  #                       "period": 300,
  #                       "stat": "Average"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 6,
  #                   "y": 6,
  #                   "x": 0,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "AWS/ApiGateway", "4xx", "ApiId", "${RestApi}", { "yAxis": "right" } ],
  #                           [ ".", "5xx", ".", ".", { "yAxis": "right" } ],
  #                           [ ".", "DataProcessed", ".", ".", { "yAxis": "left" } ],
  #                           [ ".", "Count", ".", ".", { "label": "Count", "yAxis": "right" } ],
  #                           [ ".", "IntegrationLatency", ".", ".", { "stat": "Average" } ],
  #                           [ ".", "Latency", ".", ".", { "stat": "Average" } ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "region": "${AWS::Region}",
  #                       "period": 60,
  #                       "stat": "Sum",
  #                       "title": "API Gateway"
  #                   }
  #               },
  #               {
  #                   "height": 6,
  #                   "width": 12,
  #                   "y": 0,
  #                   "x": 0,
  #                   "type": "metric",
  #                   "properties": {
  #                       "metrics": [
  #                           [ "${AWS::StackName}", "ProcessedBookings", "ServiceName", "${BookingsFunction}", "LogGroup", "${BookingsFunction}", "ServiceType", "AWS::Lambda::Function", "Service", "Bookings", { "label": "Processed Bookings"} ],
  #                           [ ".", "ProcessedLocations", ".", "${LocationsFunction}", ".", "${LocationsFunction}", ".", ".", ".", "Locations", { "label": "Processed Locations"} ],
  #                           [ ".", "ProcessedResources", ".", "${ResourcesFunction}", ".", "${ResourcesFunction}", ".", ".", ".", "Resources", { "label": "Processed Resources"} ]
  #                       ],
  #                       "view": "timeSeries",
  #                       "stacked": false,
  #                       "title": "Business Metrics",
  #                       "region": "${AWS::Region}",
  #                       "period": 60,
  #                       "stat": "Sum"
  #                   }
  #               }
  #           ]
  #         }

# Outputs:
#   APIEndpoint:
#     Description: "API Gateway endpoint URL"
#     Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

#   DashboardURL:
#     Description: "Dashboard URL"
#     Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ApplicationDashboard}"
  
#   AlarmsTopic:
#     Description: "SNS Topic to be used for the alarms subscriptions"
#     Value: !Ref AlarmsTopic

#   AccessLogs:
#     Description: "CloudWatch Logs group for API Gateway access logs"
#     Value: !Ref AccessLogs

#   LocationsTable:
#     Description: "DynamoDB Locations table"
#     Value: !Ref LocationsTable
    
#   ResourcesTable:
#     Description: "DynamoDB Resources table"
#     Value: !Ref ResourcesTable

#   BookingsTable:
#     Description: "DynamoDB Bookings table"
#     Value: !Ref BookingsTable
  
